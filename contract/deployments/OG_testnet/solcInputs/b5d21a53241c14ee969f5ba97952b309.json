{
  "language": "Solidity",
  "sources": {
    "contracts/MindCastRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract MindCastRegistry {\n    struct Episode {\n        address creator;\n        string title;\n        string audioURI;\n        string transcriptURI;\n        string summary;\n        string tags;\n        uint256 timestamp;\n        uint256 tipAmount;\n    }\n    \n    Episode[] public episodes;\n    mapping(address => uint256[]) public creatorEpisodes;\n    mapping(address => uint256) public creatorTips;\n    \n    event EpisodeCreated(\n        uint256 indexed episodeId,\n        address indexed creator,\n        string title,\n        uint256 timestamp\n    );\n    \n    event TipSent(\n        address indexed from,\n        address indexed to,\n        uint256 amount\n    );\n    \n    function createEpisode(\n        string memory _title,\n        string memory _audioURI,\n        string memory _transcriptURI,\n        string memory _summary,\n        string memory _tags\n    ) external {\n        uint256 episodeId = episodes.length;\n        \n        episodes.push(Episode({\n            creator: msg.sender,\n            title: _title,\n            audioURI: _audioURI,\n            transcriptURI: _transcriptURI,\n            summary: _summary,\n            tags: _tags,\n            timestamp: block.timestamp,\n            tipAmount: 0\n        }));\n        \n        creatorEpisodes[msg.sender].push(episodeId);\n        \n        emit EpisodeCreated(episodeId, msg.sender, _title, block.timestamp);\n    }\n    \n    function tipCreator(uint256 _episodeId) external payable {\n        require(_episodeId < episodes.length, \"Episode does not exist\");\n        require(msg.value > 0, \"Tip amount must be greater than 0\");\n        \n        address creator = episodes[_episodeId].creator;\n        episodes[_episodeId].tipAmount += msg.value;\n        creatorTips[creator] += msg.value;\n        \n        (bool sent, ) = creator.call{value: msg.value}(\"\");\n        require(sent, \"Failed to send tip\");\n        \n        emit TipSent(msg.sender, creator, msg.value);\n    }\n    \n    function getEpisodesByCreator(address _creator) external view returns (uint256[] memory) {\n        return creatorEpisodes[_creator];\n    }\n    \n    function getEpisode(uint256 _episodeId) external view returns (Episode memory) {\n        require(_episodeId < episodes.length, \"Episode does not exist\");\n        return episodes[_episodeId];\n    }\n    \n    function getTotalEpisodes() external view returns (uint256) {\n        return episodes.length;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "cancun",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}